---
# GIS.lab WEB - DEVELOPMENT

- name: Install packages
  apt:
    pkg: "{{ packages }}"
    force: yes
    install_recommends: no
    state: latest
  environment: proxy_env


### DIRECTORIES
- name: Create shared development directory
  file:
    path: "{{ synced_folder }}/dev"
    state: directory
  sudo_user: "{{ ansible_ssh_user }}"

- name: Create global directories in shared development directory
  file:
    path: "{{ synced_folder }}/dev/{{ item }}"
    state: directory
  with_items:
    - cache/tar
    - cache/pip
  sudo_user: "{{ ansible_ssh_user }}"


- name: Create local development directory
  file:
    path: /home/{{ ansible_ssh_user }}/dev
    state: directory
  sudo_user: "{{ ansible_ssh_user }}"

- name: Create global directories in local development directory
  file:
    path: /home/{{ ansible_ssh_user }}/dev/{{ item }}
    state: directory
  with_items:
    - apps
  sudo_user: "{{ ansible_ssh_user }}"


### DEPENDENCIES
# Python
- name: Install GIS.lab Web Python requirements
  pip:
    virtualenv: /home/{{ ansible_ssh_user }}/.virtualenvs/gislab-web
    requirements: "{{ synced_folder }}/server/requirements.txt"
    virtualenv_site_packages: yes
    extra_args: "--download-cache={{ synced_folder }}/dev/cache/pip"
    state: present
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-python

- name: Install GIS.lab Web Python development requirements
  pip:
    virtualenv: /home/{{ ansible_ssh_user }}/.virtualenvs/gislab-web
    requirements: "{{ synced_folder }}/server/requirements-dev.txt"
    virtualenv_site_packages: yes
    extra_args: "--download-cache={{ synced_folder }}/dev/cache/pip"
    state: present
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-python

- name: Add source code on Python path
  shell: >
    export WORKON_HOME="$HOME/.virtualenvs"
    &&
    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
    &&
    workon gislab-web
    &&
    add2virtualenv server
  args:
    chdir: "{{ synced_folder }}"
    executable: /bin/bash
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-python


# Javascript
- name: Install NVM
  shell: >
    curl {{ nvm_url }}/v{{ nvm_version }}/install.sh
    | bash
  args:
    creates: /home/{{ ansible_ssh_user }}/.nvm/nvm.sh
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript

- name: Install NodeJS
  shell: >
    export NVM_DIR="$HOME/.nvm"
    &&
    . "$NVM_DIR/nvm.sh"
    &&
    nvm install v{{ node_version }}
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript

- name: Install Gulp
  shell: >
    export NVM_DIR="$HOME/.nvm"
    &&
    . "$NVM_DIR/nvm.sh"
    &&
    nvm use v{{ node_version }}
    &&
    npm install -g gulp
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript


- name: Create local development directory for Node modules
  file:
    path: /home/{{ ansible_ssh_user }}/dev/node_modules
    state: directory
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript

- name: Symlink Node modules from local development directory
  file:
    src: /home/{{ ansible_ssh_user }}/dev/node_modules
    dest: "{{ synced_folder }}/clients/node_modules"
    state: link
    force: yes
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript

- name: Prune local Node modules for GIS.lab Web clients
  shell: >
    export NVM_DIR="$HOME/.nvm"
    &&
    . "$NVM_DIR/nvm.sh"
    &&
    nvm use v{{ node_version }}
    &&
    npm prune
  args:
    chdir: "{{ synced_folder }}/clients"
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript

- name: Install local Node modules for GIS.lab Web clients
  shell: >
    export NVM_DIR="$HOME/.nvm"
    &&
    . "$NVM_DIR/nvm.sh"
    &&
    nvm use v{{ node_version }}
    &&
    {{ item }}
  with_items:
    - npm install
    - npm install web
  args:
    chdir: "{{ synced_folder }}/clients"
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - dep-javascript


### SERVER
- name: Remove Django project directory
  file:
    path: "{{ synced_folder }}/dev/django"
    state: absent
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django

- name: Create Django project directory
  file:
    path: "{{ synced_folder }}/dev/django/devproj"
    state: directory
    recurse: yes
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django


- name: Create new Django project
  shell: >
    export WORKON_HOME="$HOME/.virtualenvs"
    &&
    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
    &&
    workon gislab-web
    &&
    django-admin.py startproject
    --template=server/webgis/conf/project_template/
    devproj
    dev/django
  args:
    chdir: "{{ synced_folder }}"
    executable: /bin/bash
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django

- name: Install custom Django project configuration
  template:
    src: django/settings_custom.py.j2
    dest: "{{ synced_folder }}/dev/django/devproj/settings_custom.py"
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django

- name: Build Django project database
  django_manage:
    command: migrate
    app_path: "{{ synced_folder }}/dev/django"
    settings: devproj.settings
    virtualenv: /home/{{ ansible_ssh_user }}/.virtualenvs/gislab-web
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django

- name: Create superuser account (username-> admin, password-> admin)
  shell: >
    export WORKON_HOME="$HOME/.virtualenvs"
    &&
    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
    &&
    workon gislab-web
    &&
    echo "from webgis.viewer.models import GislabUser;
    GislabUser.objects.create_superuser('admin', 'admin@gislab.io', 'admin')"
    | python ./manage.py shell
  args:
    chdir: "{{ synced_folder }}/dev/django"
    executable: /bin/bash
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django

- name: Create ordinary user account (username-> user, password-> user)
  shell: >
    export WORKON_HOME="$HOME/.virtualenvs"
    &&
    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
    &&
    workon gislab-web
    &&
    echo "from webgis.viewer.models import GislabUser;
    GislabUser.objects.create_user('user', 'user@gislab.io', 'user')"
    | python ./manage.py shell
  args:
    chdir: "{{ synced_folder }}/dev/django"
    executable: /bin/bash
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - server-django


### WEB CLIENT
- name: Build GIS.lab Web JS
  shell: >
    export NVM_DIR="$HOME/.nvm"
    &&
    . "$NVM_DIR/nvm.sh"
    &&
    nvm use v{{ node_version }}
    &&
    gulp
  args:
    chdir: "{{ synced_folder }}/clients"
  sudo_user: "{{ ansible_ssh_user }}"
  tags:
    - client-web

# vim: set ts=8 sts=2 sw=2 et:
