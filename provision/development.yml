---
# Build GIS.lab Web development environment.

- hosts: all
  sudo: yes

  vars:
    packages:
      - ant
      - expect
      - g++
      - htop
      - libxml2-dev
      - libxslt-dev
      - lighttpd
      - mc
      - python-dev
      - pyqt4-dev-tools
      - qgis-server
      - openjdk-7-jdk
      - tmux
      - virtualenvwrapper
      - zip
      - zlib1g-dev

    proxy_env:
      http_proxy: "{{ lookup('env','APT_PROXY') }}"

    synced_folder: /vagrant


    # QGIS
    qgis_repo: ubuntugis-nightly

    # node
    nvm_url: https://raw.githubusercontent.com/creationix/nvm
    nvm_version: 0.29.0
    node_version: 4.2.2

    # android
    android_sdk_url: http://dl.google.com/android
    android_sdk_version: 24.1.2
    android_build_tools_version: 22.0.1
    android_api_version: 22
    android_root: /home/{{ ansible_ssh_user }}/dev/apps/android-sdk-linux

    # cordova
    cordova_version: 5.1.1
    cordova_pf_android_version: 4.0.2

    # GIS.lab
    gislab_git_dl_url: https://raw.githubusercontent.com/gislab-npo/gislab

    wget_opts: "
    --continue
    --no-verbose
    --retry-connrefused
    --waitretry=1
    --read-timeout=20
    --timeout=15
    --tries=0"


  handlers:
    - name: service lighttpd restart
      service:
        name: lighttpd
        state: restarted


  tasks:
    - name: Create shared development directory
      file:
        path: "{{ synced_folder }}/dev"
        state: directory
      sudo_user: "{{ ansible_ssh_user }}"

    - name: Create global directories in shared development directory
      file:
        path: "{{ synced_folder }}/dev/{{ item }}"
        state: directory
      with_items:
        - cache/tar
        - cache/pip
      sudo_user: "{{ ansible_ssh_user }}"


    - name: Create local development directory
      file:
        path: /home/{{ ansible_ssh_user }}/dev
        state: directory
      sudo_user: "{{ ansible_ssh_user }}"

    - name: Create global directories in local development directory
      file:
        path: /home/{{ ansible_ssh_user }}/dev/{{ item }}
        state: directory
      with_items:
        - apps
      sudo_user: "{{ ansible_ssh_user }}"


    ### BASIC OS
    - name: Add UbuntuGIS repository
      apt_repository:
        repo: 'ppa:ubuntugis/ubuntugis-unstable'
        state: present
      tags:
        - basic-os


    - name: Add QGIS repository signing key
      apt_key:
        url: http://qgis.org/downloads/qgis-2015.gpg.key
        state: present
      tags:
        - basic-os

    - name: Add QGIS Master Nightly UbuntuGIS repository
      apt_repository:
        repo: 'deb http://qgis.org/{{ qgis_repo }} trusty main'
        state: present
      tags:
        - basic-os


    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      environment: proxy_env
      tags:
        - basic-os

    - name: Upgrade system
      apt:
        upgrade: full
        force: yes
      environment: proxy_env
      tags:
        - basic-os

    - name: Install packages
      apt:
        pkg: "{{ packages }}"
        force: yes
        install_recommends: no
        state: latest
      environment: proxy_env
      tags:
        - basic-os

    # locale
    - name: Generate locale
      locale_gen:
        name: en_US.UTF-8
        state: present
      tags:
        - basic-os


    ### DEPENDENCIES
    # mapserver
    - name: Install QGIS Mapserver configuration
      template:
        src: templates/mapserver/lighttpd.conf.j2
        dest: /etc/lighttpd/lighttpd.conf
      notify:
        - service lighttpd restart
      tags:
        - dep-mapserver

    # Python
    - name: Install GIS.lab Web Python requirements
      pip:
        virtualenv: /home/{{ ansible_ssh_user }}/.virtualenvs/gislab-web
        requirements: "{{ synced_folder }}/server/requirements.txt"
        virtualenv_site_packages: yes
        extra_args: "--download-cache={{ synced_folder }}/dev/cache/pip"
        state: present
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-python

    - name: Install GIS.lab Web Python development requirements
      pip:
        virtualenv: /home/{{ ansible_ssh_user }}/.virtualenvs/gislab-web
        requirements: "{{ synced_folder }}/server/requirements-dev.txt"
        virtualenv_site_packages: yes
        extra_args: "--download-cache={{ synced_folder }}/dev/cache/pip"
        state: present
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-python

    - name: Add source code on Python path
      shell: >
        export WORKON_HOME="$HOME/.virtualenvs"
        &&
        source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
        &&
        workon gislab-web
        &&
        add2virtualenv server
      args:
        chdir: "{{ synced_folder }}"
        executable: /bin/bash
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-python

    # Javascript
    - name: Install NVM
      shell: >
        curl {{ nvm_url }}/v{{ nvm_version }}/install.sh
        | bash
      args:
        creates: /home/{{ ansible_ssh_user }}/.nvm/nvm.sh
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript

    - name: Install NodeJS
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm install v{{ node_version }}
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript

    - name: Install Gulp
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        npm install -g gulp
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript


    - name: Create local development directory for Node modules
      file:
        path: /home/{{ ansible_ssh_user }}/dev/node_modules
        state: directory
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript

    - name: Symlink Node modules from local development directory
      file:
        src: /home/{{ ansible_ssh_user }}/dev/node_modules
        dest: "{{ synced_folder }}/clients/node_modules"
        state: link
        force: yes
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript

    - name: Prune local Node modules for GIS.lab Web and Mobile clients
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        npm prune
      args:
        chdir: "{{ synced_folder }}/clients"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript

    - name: Install local Node modules for GIS.lab Web and Mobile clients
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        {{ item }}
      with_items:
        - npm install
        - npm install web
        - npm install mobile
      args:
        chdir: "{{ synced_folder }}/clients"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-javascript

    # Android
    - name: Download Android SDK
      command: >
        wget
        {{ wget_opts }}
        -O {{ synced_folder }}/dev/cache/tar/android-sdk_r{{ android_sdk_version }}-linux.tgz
        {{ android_sdk_url }}/android-sdk_r{{ android_sdk_version }}-linux.tgz
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-android

    - name: Install Android SDK
      command: >
        tar -xzf
        {{ synced_folder }}/dev/cache/tar/android-sdk_r{{ android_sdk_version }}-linux.tgz
        -C /home/{{ ansible_ssh_user }}/dev/apps
      args:
        creates: "{{ android_root }}/tools/android"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-android

    - name: Install script for non-interactive Android platform, tools and API installation
      template:
        src: templates/android/android-sdk-install.expect.j2
        dest: /home/{{ ansible_ssh_user }}/dev/apps/android-sdk-install.expect
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-android

    - name: Install Android platform, tools and API
      command: >
        expect /home/{{ ansible_ssh_user }}/dev/apps/android-sdk-install.expect
      args:
        creates: "{{ android_root }}/platform-tools/adb"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-android

    # Cordova
    - name: Install Cordova
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        npm install -g cordova@{{ cordova_version }}
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-cordova

    - name: Install Android platform for Cordova
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        cordova platform add android@{{ cordova_pf_android_version }} || true
      args:
        chdir: "{{ synced_folder }}/clients/mobile/cordova-app"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-cordova

    # TODO: consider using "node tasks/plugins.js" for installing dependencies
    # from file
    # TODO: specify plugins versions
    - name: Install Cordova plugins
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        cordova plugin add "{{ item }}"
      with_items:
        - cordova-plugin-device
        - cordova-plugin-splashscreen
        - cordova-plugin-geolocation@0.3.6
        - cordova-plugin-inappbrowser
      args:
        chdir: "{{ synced_folder }}/clients/mobile/cordova-app"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - dep-cordova

    # example data
    - name: Create directory for QGIS projects publishing
      file:
        path: "{{ synced_folder }}/dev/publish/user/natural-earth"
        state: directory
        recurse: yes
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - example-data

    - name: Install example QGIS project
      copy:
        src: ../qgis/project/natural-earth/
        dest: "{{ synced_folder }}/dev/publish/user/natural-earth/"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - example-data

    ### DJANGO SERVER
    - name: Remove Django project directory
      file:
        path: "{{ synced_folder }}/dev/django"
        state: absent
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django

    - name: Create Django project directory
      file:
        path: "{{ synced_folder }}/dev/django/devproj"
        state: directory
        recurse: yes
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django


    - name: Create new Django project
      shell: >
        export WORKON_HOME="$HOME/.virtualenvs"
        &&
        source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
        &&
        workon gislab-web
        &&
        django-admin.py startproject
        --template=server/webgis/conf/project_template/
        devproj
        dev/django
      args:
        chdir: "{{ synced_folder }}"
        executable: /bin/bash
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django

    - name: Install custom Django project configuration
      template:
        src: templates/django/settings_custom.py.j2
        dest: "{{ synced_folder }}/dev/django/devproj/settings_custom.py"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django

    - name: Build Django project database
      django_manage:
        command: migrate
        app_path: "{{ synced_folder }}/dev/django"
        settings: devproj.settings
        virtualenv: /home/{{ ansible_ssh_user }}/.virtualenvs/gislab-web
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django

    - name: Create superuser account (username-> admin, password-> admin)
      shell: >
        export WORKON_HOME="$HOME/.virtualenvs"
        &&
        source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
        &&
        workon gislab-web
        &&
        echo "from webgis.viewer.models import GislabUser;
        GislabUser.objects.create_superuser('admin', 'admin@gislab.io', 'admin')"
        | python ./manage.py shell
      args:
        chdir: "{{ synced_folder }}/dev/django"
        executable: /bin/bash
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django

    - name: Create ordinary user account (username-> user, password-> user)
      shell: >
        export WORKON_HOME="$HOME/.virtualenvs"
        &&
        source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
        &&
        workon gislab-web
        &&
        echo "from webgis.viewer.models import GislabUser;
        GislabUser.objects.create_user('user', 'user@gislab.io', 'user')"
        | python ./manage.py shell
      args:
        chdir: "{{ synced_folder }}/dev/django"
        executable: /bin/bash
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - server-django


    ### WEB CLIENT
    - name: Build GIS.lab Web JS
      shell: >
        export NVM_DIR="$HOME/.nvm"
        &&
        . "$NVM_DIR/nvm.sh"
        &&
        nvm use v{{ node_version }}
        &&
        gulp
      args:
        chdir: "{{ synced_folder }}/clients"
      sudo_user: "{{ ansible_ssh_user }}"
      tags:
        - client-web

# vim: set ts=8 sts=2 sw=2 et:
